using AerodynamicObjects.Aerodynamics;
using UnityEngine;

namespace AerodynamicObjects
{
    /// <summary>
    /// Creates an arrow with scale and direction proportional to the drag force generated by an AeroObject's Drag Model.
    /// </summary>
    [AddComponentMenu("Aerodynamic Objects/Visualisation/Drag Arrow")]
    public class DragArrow : ArrowComponent
    {
        AeroObject aeroObject;
        DragModel dragModel;
        int modelIndex;
        Arrow arrow;
        public Color colour = new Color(1, 31f / 255f, 31f / 255f, 0.5f);

        private void OnEnable()
        {
            aeroObject = TryGetAeroObject();
            dragModel = aeroObject.GetModel<DragModel>();

            if (dragModel == null)
            {
                Debug.LogWarning("No drag model was found for the drag arrow component on " + name + ". Destroying the drag arrow component.");
                Destroy(this);
                return;
            }

            modelIndex = aeroObject.GetModelIndex<DragModel>();
            arrow = new Arrow(colour, "Drag Arrow");
        }

        void Update()
        {
            if (UseCoefficientForScale)
            {
                // =================================================================================
                // We need to update this to properly calculate the coefficient for the drag arrow
                // =================================================================================
                SetArrowPositionAndRotationFromVector(arrow, dragModel.CDS, aeroObject.transform.position);
            }
            else
            {
                SetArrowPositionAndRotationFromVector(arrow, aeroObject.transform.TransformDirection(aeroObject.aerodynamicLoads[modelIndex].force), aeroObject.transform.position);
            }
        }

        public override void CleanUp()
        {
            arrow?.DestroyArrow();
        }
    }
}
